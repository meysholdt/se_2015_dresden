/*
* generated by Xtext
*/
package org.xtext.quickfix.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.quickfix.services.ExampleQuickfixGrammarAccess;

public class ExampleQuickfixParser extends AbstractContentAssistParser {

	@Inject
	private ExampleQuickfixGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected org.xtext.quickfix.ui.contentassist.antlr.internal.InternalExampleQuickfixParser createParser() {
		org.xtext.quickfix.ui.contentassist.antlr.internal.InternalExampleQuickfixParser result = new org.xtext.quickfix.ui.contentassist.antlr.internal.InternalExampleQuickfixParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCityAccess().getGroup(), "rule__City__Group__0");
					put(grammarAccess.getSightAccess().getGroup(), "rule__Sight__Group__0");
					put(grammarAccess.getModelAccess().getCitiesAssignment(), "rule__Model__CitiesAssignment");
					put(grammarAccess.getCityAccess().getNameAssignment_1(), "rule__City__NameAssignment_1");
					put(grammarAccess.getCityAccess().getSightsAssignment_3(), "rule__City__SightsAssignment_3");
					put(grammarAccess.getSightAccess().getNameAssignment_1(), "rule__Sight__NameAssignment_1");
					put(grammarAccess.getSightAccess().getDescriptionAssignment_2(), "rule__Sight__DescriptionAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.quickfix.ui.contentassist.antlr.internal.InternalExampleQuickfixParser typedParser = (org.xtext.quickfix.ui.contentassist.antlr.internal.InternalExampleQuickfixParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExampleQuickfixGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExampleQuickfixGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
