/*
* generated by Xtext
*/
package org.xtext.quickfix.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExampleQuickfixGrammarAccess extends AbstractGrammarElementFinder {


	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cCitiesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCitiesCityParserRuleCall_0 = (RuleCall)cCitiesAssignment.eContents().get(0);

		//Model:
		//	cities+=City*;
		public ParserRule getRule() { return rule; }

		//cities+=City*
		public Assignment getCitiesAssignment() { return cCitiesAssignment; }

		//City
		public RuleCall getCitiesCityParserRuleCall_0() { return cCitiesCityParserRuleCall_0; }
	}

	public class CityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "City");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSightsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSightsSightParserRuleCall_3_0 = (RuleCall)cSightsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);

		//City:
		//	"city" name=STRING "{" sights+=Sight* "}";
		public ParserRule getRule() { return rule; }

		//"city" name=STRING "{" sights+=Sight* "}"
		public Group getGroup() { return cGroup; }

		//"city"
		public Keyword getCityKeyword_0() { return cCityKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//sights+=Sight*
		public Assignment getSightsAssignment_3() { return cSightsAssignment_3; }

		//Sight
		public RuleCall getSightsSightParserRuleCall_3_0() { return cSightsSightParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);

		//Sight:
		//	"sight" name=STRING description=STRING;
		public ParserRule getRule() { return rule; }

		//"sight" name=STRING description=STRING
		public Group getGroup() { return cGroup; }

		//"sight"
		public Keyword getSightKeyword_0() { return cSightKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}


	private ModelElements pModel;
	private CityElements pCity;
	private SightElements pSight;

	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExampleQuickfixGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}

	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.quickfix.ExampleQuickfix".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}


	public Grammar getGrammar() {
		return grammar;
	}


	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}


	//Model:
	//	cities+=City*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}

	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//City:
	//	"city" name=STRING "{" sights+=Sight* "}";
	public CityElements getCityAccess() {
		return (pCity != null) ? pCity : (pCity = new CityElements());
	}

	public ParserRule getCityRule() {
		return getCityAccess().getRule();
	}

	//Sight:
	//	"sight" name=STRING description=STRING;
	public SightElements getSightAccess() {
		return (pSight != null) ? pSight : (pSight = new SightElements());
	}

	public ParserRule getSightRule() {
		return getSightAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
