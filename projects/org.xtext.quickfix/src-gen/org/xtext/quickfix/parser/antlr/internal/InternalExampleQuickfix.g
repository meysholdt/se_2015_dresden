/*
* generated by Xtext
*/
grammar InternalExampleQuickfix;

options {
	superClass=AbstractInternalAntlrParser;

}

@lexer::header {
package org.xtext.quickfix.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import.
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.quickfix.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.quickfix.services.ExampleQuickfixGrammarAccess;

}

@parser::members {

	private ExampleQuickfixGrammarAccess grammarAccess;

    public InternalExampleQuickfixParser(TokenStream input, ExampleQuickfixGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
	return "Model";
	}

	@Override
	protected ExampleQuickfixGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel
	 { $current=$iv_ruleModel.current; }
	 EOF
;

// Rule Model
ruleModel returns [EObject current=null]
    @init { enterRule();
    }
    @after { leaveRule(); }:
(
(
		{
	        newCompositeNode(grammarAccess.getModelAccess().getCitiesCityParserRuleCall_0());
	    }
		lv_cities_0_0=ruleCity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
		add(
			$current,
			"cities",
			lv_cities_0_0,
			"City");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleCity
entryRuleCity returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCityRule()); }
	 iv_ruleCity=ruleCity
	 { $current=$iv_ruleCity.current; }
	 EOF
;

// Rule City
ruleCity returns [EObject current=null]
    @init { enterRule();
    }
    @after { leaveRule(); }:
(	otherlv_0='city'
    {
	newLeafNode(otherlv_0, grammarAccess.getCityAccess().getCityKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCityAccess().getNameSTRINGTerminalRuleCall_1_0());
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCityRule());
	        }
		setWithLastConsumed(
			$current,
			"name",
			lv_name_1_0,
			"STRING");
	    }

)
)	otherlv_2='{'
    {
	newLeafNode(otherlv_2, grammarAccess.getCityAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{
	        newCompositeNode(grammarAccess.getCityAccess().getSightsSightParserRuleCall_3_0());
	    }
		lv_sights_3_0=ruleSight		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCityRule());
	        }
		add(
			$current,
			"sights",
			lv_sights_3_0,
			"Sight");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}'
    {
	newLeafNode(otherlv_4, grammarAccess.getCityAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSight
entryRuleSight returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSightRule()); }
	 iv_ruleSight=ruleSight
	 { $current=$iv_ruleSight.current; }
	 EOF
;

// Rule Sight
ruleSight returns [EObject current=null]
    @init { enterRule();
    }
    @after { leaveRule(); }:
(	otherlv_0='sight'
    {
	newLeafNode(otherlv_0, grammarAccess.getSightAccess().getSightKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSightAccess().getNameSTRINGTerminalRuleCall_1_0());
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSightRule());
	        }
		setWithLastConsumed(
			$current,
			"name",
			lv_name_1_0,
			"STRING");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getSightAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSightRule());
	        }
		setWithLastConsumed(
			$current,
			"description",
			lv_description_2_0,
			"STRING");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
