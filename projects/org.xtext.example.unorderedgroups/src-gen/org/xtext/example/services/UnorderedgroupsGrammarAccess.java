/*
* generated by Xtext
*/
package org.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class UnorderedgroupsGrammarAccess extends AbstractGrammarElementFinder {


	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Employee");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cFirstNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFirstNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFirstNameIDTerminalRuleCall_0_1_0 = (RuleCall)cFirstNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cAgeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAgeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAgeINTTerminalRuleCall_1_1_0 = (RuleCall)cAgeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cLastNameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLastNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLastNameIDTerminalRuleCall_2_1_0 = (RuleCall)cLastNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cYearOfBirthKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cYearOfBirthAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cYearOfBirthINTTerminalRuleCall_3_1_0 = (RuleCall)cYearOfBirthAssignment_3_1.eContents().get(0);

		//Employee:
		//	"firstName" firstName=ID & ("age" age=INT)? & "lastName" lastName=ID & ("yearOfBirth" yearOfBirth=INT)?;
		public ParserRule getRule() { return rule; }

		//"firstName" firstName=ID & ("age" age=INT)? & "lastName" lastName=ID & ("yearOfBirth" yearOfBirth=INT)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"firstName" firstName=ID
		public Group getGroup_0() { return cGroup_0; }

		//"firstName"
		public Keyword getFirstNameKeyword_0_0() { return cFirstNameKeyword_0_0; }

		//firstName=ID
		public Assignment getFirstNameAssignment_0_1() { return cFirstNameAssignment_0_1; }

		//ID
		public RuleCall getFirstNameIDTerminalRuleCall_0_1_0() { return cFirstNameIDTerminalRuleCall_0_1_0; }

		//("age" age=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"age"
		public Keyword getAgeKeyword_1_0() { return cAgeKeyword_1_0; }

		//age=INT
		public Assignment getAgeAssignment_1_1() { return cAgeAssignment_1_1; }

		//INT
		public RuleCall getAgeINTTerminalRuleCall_1_1_0() { return cAgeINTTerminalRuleCall_1_1_0; }

		//"lastName" lastName=ID
		public Group getGroup_2() { return cGroup_2; }

		//"lastName"
		public Keyword getLastNameKeyword_2_0() { return cLastNameKeyword_2_0; }

		//lastName=ID
		public Assignment getLastNameAssignment_2_1() { return cLastNameAssignment_2_1; }

		//ID
		public RuleCall getLastNameIDTerminalRuleCall_2_1_0() { return cLastNameIDTerminalRuleCall_2_1_0; }

		//("yearOfBirth" yearOfBirth=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"yearOfBirth"
		public Keyword getYearOfBirthKeyword_3_0() { return cYearOfBirthKeyword_3_0; }

		//yearOfBirth=INT
		public Assignment getYearOfBirthAssignment_3_1() { return cYearOfBirthAssignment_3_1; }

		//INT
		public RuleCall getYearOfBirthINTTerminalRuleCall_3_1_0() { return cYearOfBirthINTTerminalRuleCall_3_1_0; }
	}


	private EmployeeElements pEmployee;

	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public UnorderedgroupsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}

	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Unorderedgroups".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}


	public Grammar getGrammar() {
		return grammar;
	}


	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}


	//Employee:
	//	"firstName" firstName=ID & ("age" age=INT)? & "lastName" lastName=ID & ("yearOfBirth" yearOfBirth=INT)?;
	public EmployeeElements getEmployeeAccess() {
		return (pEmployee != null) ? pEmployee : (pEmployee = new EmployeeElements());
	}

	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
